package com.codef.xsalt.utils;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import com.codef.xsalt.arch.XSaLTGenericLogger;

public class XSaLTLogWatcher extends JPanel
{
	private static final long serialVersionUID = -150388941617602185L;
	
	private static final String XS_NEW_LINE = "\n";
	private static final String XS_SCROLL_LOCK_OFF_TEXT = "Scroll Lock Off";
	private static final String XS_SCROLL_LOCK_ON_TEXT = "Scroll Lock On";
	
	private JFileChooser ioFileChooser;
	private HashMap<String, LogReaderThread> ioLogReaderThreadMap;
	private boolean ibScrollLock = false;
	private ArrayList<Color> ioFontColors;
	private SimpleAttributeSet ioSimpleAttrs;
	
	private FindDialog ioFindDialog;
	private ColorChooserPanel ioColorChooserPanel;

	// Variables created by netbeans
	private JButton ioClearButton;
	private JButton ioFindButton;
	private JTextPane ioLogTextPane;
	private JButton ioOpenLogButton;
	private JButton ioAddLogButton;
	private JToggleButton ioScrollLockButton;
	private JScrollPane ioScrollPane;
	private StyledDocument ioStyledDocument;
	// End of variables declaration

	/** Creates new form XSaLTLogWatcher */
	public XSaLTLogWatcher()
	{
		initComponents();
	}

	public static void main(String[] args)
	{
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				UIManager.put("swing.boldMetal", Boolean.FALSE);
				try
				{
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				}
				catch(Exception ex)
				{
					XSaLTGenericLogger.error("", ex);
				}
				createAndShowGUI();
			}
		});
	}

	private static void createAndShowGUI()
	{
		JFrame oFrame = new JFrame("XSaLTLogWatcher");
		oFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		XSaLTLogWatcher oLW = new XSaLTLogWatcher();
		oFrame.add(oLW);

		oFrame.pack();
		oFrame.setVisible(true);
		oLW.openFileChooser(true);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()
	{
		ioFontColors = new ArrayList<Color>();
		ioFontColors.add(Color.BLACK);
		ioFontColors.add(Color.RED);
		ioFontColors.add(Color.GREEN);

		ioOpenLogButton = new javax.swing.JButton();
		ioAddLogButton = new javax.swing.JButton(); 
		ioClearButton = new javax.swing.JButton();
		ioScrollLockButton = new javax.swing.JToggleButton();
		ioScrollPane = new javax.swing.JScrollPane();
		ioLogTextPane = new javax.swing.JTextPane();
		initTextPane();
		ioFindButton = new javax.swing.JButton();

		ioOpenLogButton.setText("Open Log");
		ioOpenLogButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ioOpenLogButtonActionPerformed(evt);
			}
		});
		
		ioAddLogButton.setText("Add Log");
		ioAddLogButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				ioAddLogButtonActionPerformed(evt);
			}
		});

		ioClearButton.setText("Clear");
		ioClearButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ioClearButtonActionPerformed(evt);
			}
		});
		
		ioFindButton.setText("Find Text");
		ioFindButton.addActionListener(
				new java.awt.event.ActionListener()
				{
					public void actionPerformed(java.awt.event.ActionEvent evt)
					{
						ioFindButtonActionPerformed(evt);
					}
				});

		ioScrollLockButton.setText(XS_SCROLL_LOCK_OFF_TEXT);
		ioScrollLockButton.addActionListener(
				new java.awt.event.ActionListener()
				{
					public void actionPerformed(java.awt.event.ActionEvent evt)
					{
						ioScrollLockButtonActionPerformed(evt);
					}
				});

		ioLogTextPane.setEditable(false);
		ioScrollPane.setViewportView(ioLogTextPane);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(ioOpenLogButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(ioAddLogButton)
						.addGap(181, 181, 181)
						.addComponent(ioFindButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 299, Short.MAX_VALUE)
						.addComponent(ioClearButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(ioScrollLockButton))
						.addComponent(ioScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ioOpenLogButton)
								.addComponent(ioScrollLockButton)
								.addComponent(ioClearButton)
								.addComponent(ioFindButton)
								.addComponent(ioAddLogButton))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(ioScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE))
				);
	}
	
	private void initTextPane()
	{
		ioLogTextPane.setText("");
		ioStyledDocument = ioLogTextPane.getStyledDocument();
		ioSimpleAttrs = new SimpleAttributeSet();
	}
	
	private void ioScrollLockButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		ibScrollLock = !ibScrollLock;
		
		if (ibScrollLock)
		{
			ioScrollLockButton.setText(XS_SCROLL_LOCK_ON_TEXT);
		}
		else
		{
			ioScrollLockButton.setText(XS_SCROLL_LOCK_OFF_TEXT);
		}
	}
	
	private void ioFindButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		openFindDialog();
	}
	
	private void openFindDialog()
	{
		if (ioFindDialog == null)
		{
			ioFindDialog = new FindDialog();
		}
		ioFindDialog.setVisible(true);
	}

	private void ioClearButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		initTextPane();
	}
	
	private void openFileChooser(boolean _bAllNewThreads)
	{
		if (ioFileChooser == null)
		{
			ioFileChooser = new JFileChooser();
		}
		
		try
		{
			File oFile = new File("D:\\\\Tomcat7\\logs\\");
			ioFileChooser.setCurrentDirectory(oFile);
		}
		catch(Exception ex)
		{
			XSaLTGenericLogger.error("", ex);
		}
		int nReturnVal = ioFileChooser.showDialog(this, "Choose Log File");

		if (nReturnVal == JFileChooser.APPROVE_OPTION)
		{
			if (ioLogReaderThreadMap != null)
			{
				if (_bAllNewThreads)
				{
					for (String sKey : ioLogReaderThreadMap.keySet())
					{
						ioLogReaderThreadMap.get(sKey).interrupt();
					}
					ioLogReaderThreadMap = new HashMap<String, LogReaderThread>();
				}
			}
			else
			{
				ioLogReaderThreadMap = new HashMap<String, LogReaderThread>();
			}
			initTextPane();

			String sFileName = ioFileChooser.getSelectedFile().toString();
			
			if (ioColorChooserPanel == null)
			{
				ioColorChooserPanel = new ColorChooserPanel();
			}
			ioColorChooserPanel.setVariables(sFileName, _bAllNewThreads);
			ioColorChooserPanel.setVisible(true);
		}
	}

	private void ioOpenLogButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		openFileChooser(true);
	}
	
	private void ioAddLogButtonActionPerformed(java.awt.event.ActionEvent evt)
	{
		openFileChooser(false);
	}

	private class LogReaderThread extends Thread
	{
		private String isFileName;
		private Color ioFontColor;
		private boolean ibInterrupted = false;
		private boolean ibShowCurrentContents = false;
		
		public LogReaderThread(String _sFileName, boolean _bShowCurrentContents, Color _oFontColor)
		{
			isFileName = _sFileName;
			ibShowCurrentContents = _bShowCurrentContents;
			ioFontColor = _oFontColor;
		}

		@Override
		public void run()
		{
			
			BufferedReader oBR = null;
			
			try
			{
				oBR = new BufferedReader(new FileReader(isFileName));
				String line = null;

				java.util.Date oNow = new java.util.Date();
				File oFile = new File(isFileName);
				
				boolean bFirstPass = true;
				while (!ibInterrupted)
				{
					if (!ibShowCurrentContents && bFirstPass)
					{
						while (!ibInterrupted && (oFile.lastModified() < oNow.getTime()) && ((line = oBR.readLine()) != null))
						{
							// do nothing...
						}
						bFirstPass = false;
					}
					
					line = oBR.readLine();
					if (line == null)
					{
						Thread.sleep(1000);
					}
					else
					{
						StyleConstants.setForeground(ioSimpleAttrs, ioFontColor);
						ioStyledDocument.insertString(ioStyledDocument.getLength(), line + XS_NEW_LINE, ioSimpleAttrs);
						if (!ibScrollLock)
						{
							ioLogTextPane.setCaretPosition(ioStyledDocument.getLength());
						}
					}
				}
			}
			catch(Exception ex)
			{
				ibInterrupted = true;
				
				StackTraceElement[] oaStackTrace = ex.getStackTrace();				
				ioLogTextPane.setText("\nEXCEPTION CAUGHT:\n\n");
				ioStyledDocument = ioLogTextPane.getStyledDocument();
				javax.swing.text.SimpleAttributeSet oKeyWord = new javax.swing.text.SimpleAttributeSet();
				javax.swing.text.StyleConstants.setForeground(oKeyWord, Color.RED);
				
				for (int i = 0; i < oaStackTrace.length; i++)
				{
					try
					{
						ioStyledDocument.insertString(ioStyledDocument.getLength(), oaStackTrace[i].toString() + XS_NEW_LINE, null);
					}
					catch (BadLocationException ble)
					{
						XSaLTGenericLogger.error("", ble);
					}
				}
			}
			finally
			{
				try {
					oBR.close();
				} catch (IOException e) {
				}
			}
			
			
		}

		@Override
		public void interrupt()
		{
			super.interrupt();
			ibInterrupted = true;
		}       
	}
	
	private class ColorChooserPanel extends javax.swing.JDialog
	{
		private static final long serialVersionUID = 1L;
		private javax.swing.JComboBox ioColorComboBox;
		private javax.swing.JButton ioOKButton;
		private javax.swing.JLabel jLabel1;
		
		private String isFileName;
		private boolean ibAllNewThreads;
		
		public ColorChooserPanel()
		{
			initComponents();
		}
		
		public void setVariables(String _sFileName, boolean _bAllNewThreads)
		{
			ioColorComboBox.setSelectedIndex(0);
			isFileName = _sFileName;
			ibAllNewThreads = _bAllNewThreads;
		}
		
		private void initComponents()
		{
			jLabel1 = new javax.swing.JLabel();
			ioOKButton = new javax.swing.JButton();
			ioColorComboBox = new javax.swing.JComboBox();

			jLabel1.setText("Choose a color for the font from the selected file:");

			ioColorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Black", "Red", "Green", "Blue" }));
			
			setMaximumSize(new java.awt.Dimension(260, 110));
	        setMinimumSize(new java.awt.Dimension(260, 110));
	        setModalityType(ModalityType.APPLICATION_MODAL);
	        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	        setLocationRelativeTo(ioLogTextPane);
	        setLayout(new java.awt.BorderLayout());

	        add(jLabel1, java.awt.BorderLayout.PAGE_START);

	        ioColorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Black", "Red", "Green", "Blue" }));
	        add(ioColorComboBox, java.awt.BorderLayout.CENTER);

	        ioOKButton.setText("OK");
	        ioOKButton.addMouseListener(new java.awt.event.MouseAdapter() {
	            public void mouseReleased(java.awt.event.MouseEvent evt) {
	                ioOKButtonMouseReleased(evt);
	            }
	        });
	        add(ioOKButton, java.awt.BorderLayout.PAGE_END);
		}

		private void ioOKButtonMouseReleased(java.awt.event.MouseEvent evt)
		{
			Color sFontColor = Color.BLACK;
			int nSelectedIndex = ioColorComboBox.getSelectedIndex();
			if (nSelectedIndex == 1)
			{
				sFontColor = Color.RED;
			}
			else if (nSelectedIndex == 2)
			{
				sFontColor = Color.GREEN;
			}
			else if (nSelectedIndex == 3)
			{
				sFontColor = Color.BLUE;
			}
			
			LogReaderThread oLogReaderThread = new LogReaderThread(isFileName, ibAllNewThreads, sFontColor);
			oLogReaderThread.start();
			ioLogReaderThreadMap.put(isFileName, oLogReaderThread);
			setVisible(false);
		}		
	}
	
	private class FindDialog extends javax.swing.JDialog
	{
		private static final long serialVersionUID = 4630926183906000243L;
		private javax.swing.JButton ioCancelButton;
	    private javax.swing.JCheckBox ioCaseSensitiveCheckBox;
	    private javax.swing.JCheckBox ioWrapSearchCheckBox;
	    private javax.swing.JButton ioFindNextButton;
	    private javax.swing.JTextField ioFindTextField;
	    private javax.swing.JLabel ioTextLabel;
	    private javax.swing.JLabel ioNotFoundLabel;
	    
		public FindDialog() {
	        initComponents();
	    }

	    private void initComponents() {
	    	
	    	ioTextLabel = new javax.swing.JLabel();
	    	ioNotFoundLabel = new javax.swing.JLabel();
	        ioFindTextField = new javax.swing.JTextField();
	        ioCancelButton = new javax.swing.JButton();
	        ioCaseSensitiveCheckBox = new javax.swing.JCheckBox();
	        ioWrapSearchCheckBox = new javax.swing.JCheckBox();
	        ioFindNextButton = new javax.swing.JButton();
	        
	        ioFindNextButton.addActionListener(
					new java.awt.event.ActionListener()
					{
						public void actionPerformed(java.awt.event.ActionEvent evt)
						{
							ioFindNextButtonActionPerformed(evt);
						}
					});
	        
	        ioFindTextField.addKeyListener(
	        		new java.awt.event.KeyAdapter()
	        		{
	        			public void keyTyped(java.awt.event.KeyEvent evt)
	        			{
	        				ioFindTextFieldKeyTyped(evt);
	        			}	        			
	        		});	    
	        
	        ioCancelButton.addActionListener(
					new java.awt.event.ActionListener()
					{
						public void actionPerformed(java.awt.event.ActionEvent evt)
						{
							ioCancelButtonActionPerformed(evt);
						}
					});
	        

	    	java.awt.GridBagConstraints gridBagConstraints;	        

	        setMaximumSize(new java.awt.Dimension(260, 220));
	        setMinimumSize(new java.awt.Dimension(260, 220));
	        setModalityType(ModalityType.APPLICATION_MODAL);
	        setTitle("Find Text");
	        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	        setLocationRelativeTo(ioFindButton);
	        setLayout(new java.awt.GridBagLayout());

	        ioTextLabel.setText("Text to Find:");
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
	        add(ioTextLabel, gridBagConstraints);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridwidth = 7;
	        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
	        add(ioFindTextField, gridBagConstraints);	        

	        ioCaseSensitiveCheckBox.setText("Case Sensitive");
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.gridwidth = 4;
	        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
	        add(ioCaseSensitiveCheckBox, gridBagConstraints);
	        
	        ioWrapSearchCheckBox.setText("Wrap Search");
	        ioWrapSearchCheckBox.setSelected(true);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.gridwidth = 4;
	        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
	        add(ioWrapSearchCheckBox, gridBagConstraints);

	        ioFindNextButton.setText("Find/Next");
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(6, 4, 6, 4);
	        add(ioFindNextButton, gridBagConstraints);
	        
	        ioCancelButton.setText("Cancel");
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(6, 4, 6, 4);
	        add(ioCancelButton, gridBagConstraints);
	        
	        ioNotFoundLabel.setText("String not found.");
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 4;
	        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
	        add(ioNotFoundLabel, gridBagConstraints);
	        
	        ioNotFoundLabel.setVisible(false);
	    }
	    
	    private void ioFindNextButtonActionPerformed(java.awt.event.ActionEvent evt)
		{
	    	findText();
		}
	    
	    private void ioFindTextFieldKeyTyped(java.awt.event.KeyEvent evt)
	    {
	    	if (evt.getKeyChar() == '\n')
	    	{
	    		findText();
	    	}
	    }
	    
	    private void findText()
	    {
	    	ioNotFoundLabel.setVisible(false);
	    	Highlighter oHighlight = ioLogTextPane.getHighlighter();
    		oHighlight.removeAllHighlights();
	    	String sTextToFind = ioFindTextField.getText();	    	
	    	try
	    	{
	    		int nCursorPos = ioLogTextPane.getCaretPosition();
	    		String sLogText = ioLogTextPane.getDocument().getText(nCursorPos, ioLogTextPane.getDocument().getLength() - nCursorPos);
	    		if (!ioCaseSensitiveCheckBox.isSelected())
	    		{
	    			sLogText = sLogText.toLowerCase();
	    			sTextToFind = sTextToFind.toLowerCase();
	    		}
	    		int idx = sLogText.indexOf(sTextToFind);
	    		
	    		boolean bTextFound = (idx >= 0);
	    		if (!bTextFound && ioWrapSearchCheckBox.isSelected())
	    		{
	    			sLogText = ioLogTextPane.getDocument().getText(0, nCursorPos + 1);
	    			if (!ioCaseSensitiveCheckBox.isSelected())
		    		{
		    			sLogText = sLogText.toLowerCase();
		    			sTextToFind = sTextToFind.toLowerCase();
		    		}
		    		idx = sLogText.indexOf(sTextToFind);
		    		if (idx >= 0)
		    		{
		    			bTextFound = true;
		    			nCursorPos = 0;
		    		}
	    		}	    		
	    		
	    		if (bTextFound)
	    		{
	    			idx += nCursorPos;
	    			ioLogTextPane.setCaretPosition(idx + sTextToFind.length());
	    			oHighlight.addHighlight(idx, idx + sTextToFind.length(), new DefaultHighlighter.DefaultHighlightPainter(Color.ORANGE));
	    		}
	    		
    			ioNotFoundLabel.setVisible(!bTextFound);	    		
			}
	    	catch (BadLocationException e)
	    	{
				XSaLTGenericLogger.error("", e);
			}
	    }
	    
	    private void ioCancelButtonActionPerformed(java.awt.event.ActionEvent evt)
	    {
	    	dispose();
	    }
	}
}
